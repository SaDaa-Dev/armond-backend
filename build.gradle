plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.chandev'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'
def queryDslVersion = '5.0.0'

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Jackson Hibernate Module
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'

	// Hibernate Core
	implementation "org.hibernate.orm:hibernate-core:6.2.5.Final"

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	// Jakarta Annotations and Persistence API
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// PostgreSQL JDBC Driver
	runtimeOnly 'org.postgresql:postgresql'


	// Testing
	testImplementation 'org.testng:testng:7.1.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

repositories {
	mavenCentral()
}

// querydsl 관련 소스 경로 설정
sourceSets {
	main {
		java {
			srcDir "$buildDir/generated/querydsl"
		}
	}
}
def generatedQuerydslDir = "$buildDir/generated/querydsl"

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(generatedQuerydslDir)
	options.compilerArgs += [
			"-Aquerydsl.entityAccessors=true",
			"-Aquerydsl.packageSuffix=.q"
	]
}

tasks.named('clean') {
	delete generatedQuerydslDir
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
//	all {
//		exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
//	}
	querydsl {
		extendsFrom compileClasspath
	}
}

tasks.withType(Test) {
	useJUnitPlatform()
}